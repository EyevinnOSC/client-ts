/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    /** Say hello */
    get: {
      responses: {
        /** The magical words! */
        200: {
          schema: string;
        };
      };
    };
  };
  '/postgrestinstance': {
    /** List all running postgrest instances */
    get: {
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the postgrest instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            DbUri: string;
            DbAnonRole?: string;
            DbSchemas?: string;
          }[];
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Launch a new postgrest instance */
    post: {
      parameters: {
        body: {
          body?: {
            /** @description Name of the postgrest instance */
            name: string;
            DbUri: string;
            DbAnonRole?: string;
            DbSchemas?: string;
          };
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the postgrest instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            DbUri: string;
            DbAnonRole?: string;
            DbSchemas?: string;
          };
        };
        /** Default Response */
        403: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        409: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/postgrestinstance/{id}': {
    /** Obtain status and resource URLs for an postgrest instance */
    get: {
      parameters: {
        path: {
          /** Name of the postgrest instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the postgrest instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            DbUri: string;
            DbAnonRole?: string;
            DbSchemas?: string;
          };
        };
        /** Default Response */
        404: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Stop and remove an postgrest instance */
    delete: {
      parameters: {
        path: {
          /** Name of the postgrest instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        204: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/health/{id}': {
    /** Return status of postgrest instance */
    get: {
      parameters: {
        path: {
          /** Name of the postgrest instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @enum {string} */
            status: 'starting' | 'running' | 'stopped' | 'failed' | 'unknown';
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/logs/{id}': {
    /** Return the latest logs from the postgrest instance */
    get: {
      parameters: {
        query: {
          timestamps?: boolean;
          sinceSeconds?: number;
        };
        path: {
          /** Name of the postgrest instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/ports/{id}': {
    /** Return the exposed extra ports for postgrest instance */
    get: {
      parameters: {
        path: {
          /** Name of the postgrest instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            externalIp: string;
            externalPort: number;
            internalPort: number;
          }[];
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
}

export interface definitions {}

export interface operations {}

export interface external {}

export type PostgrestPostgrest =
  paths['/postgrestinstance/{id}']['get']['responses']['200']['schema'];

export type PostgrestPostgrestConfig =
  paths['/postgrestinstance']['post']['parameters']['body']['body'];
import {
  Context,
  createInstance,
  waitForInstanceReady,
  removeInstance,
  getInstance
} from '@osaas/client-core';
/**
 * @namespace postgrest-postgrest
 * @description Transform your PostgreSQL database into a high-performance RESTful API with PostgREST. Enjoy rapid response times, enhanced security, and seamless scaling for robust, efficient app development.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-PostgREST.html|Online docs} for further information
 */

/**
 * @typedef {Object} PostgrestPostgrestConfig
 * @property {string} name - Name of postgrest
 * @property {string} DbUri - DbUri
 * @property {string} [DbAnonRole] - DbAnonRole
 * @property {string} [DbSchemas] - DbSchemas

 * 
 */

/**
 * @typedef {Object} PostgrestPostgrest
 * @property {string} name - Name of the PostgREST instance
 * @property {string} url - URL of the PostgREST instance
 *
 */

/**
 * Create a new PostgREST instance
 *
 * @memberOf postgrest-postgrest
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {PostgrestPostgrestConfig} body - Service instance configuration
 * @returns {PostgrestPostgrest} - Service instance
 * @example
 * import { Context } from '@osaas/client-core';
 * import { createPostgrestPostgrestInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const body: PostgrestPostgrestConfig = { name: 'myinstance', ... };
 * const instance = await createPostgrestPostgrestInstance(ctx, body);
 * console.log(instance.url);
 */
export async function createPostgrestPostgrestInstance(
  ctx: Context,
  body: PostgrestPostgrestConfig
): Promise<PostgrestPostgrest> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'postgrest-postgrest'
  );
  const instance = await createInstance(
    ctx,
    'postgrest-postgrest',
    serviceAccessToken,
    body
  );
  await waitForInstanceReady('postgrest-postgrest', instance.name, ctx);
  return instance;
}

/**
 * Remove a PostgREST instance
 *
 * @memberOf postgrest-postgrest
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the postgrest to be removed
 */
export async function removePostgrestPostgrestInstance(
  ctx: Context,
  name: string
): Promise<void> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'postgrest-postgrest'
  );
  await removeInstance(ctx, 'postgrest-postgrest', name, serviceAccessToken);
}

/**
 * Get a PostgREST instance
 *
 * @memberOf postgrest-postgrest
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the postgrest to be retrieved
 * @returns {PostgrestPostgrest} - Service instance
 * @example
 * import { Context } from '@osaas/client-core';
 * import { getPostgrestPostgrestInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await getPostgrestPostgrestInstance(ctx, 'myinstance');
 * console.log(instance.url);
 */
export async function getPostgrestPostgrestInstance(
  ctx: Context,
  name: string
): Promise<PostgrestPostgrest> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'postgrest-postgrest'
  );
  return await getInstance(
    ctx,
    'postgrest-postgrest',
    name,
    serviceAccessToken
  );
}
