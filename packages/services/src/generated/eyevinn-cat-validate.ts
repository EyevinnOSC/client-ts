/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    /** Say hello */
    get: {
      responses: {
        /** The magical words! */
        200: {
          schema: string;
        };
      };
    };
  };
  '/cat-validateinstance': {
    /** List all running cat-validate instances */
    get: {
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the cat-validate instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            Keys: string;
            Issuer?: string;
            RedisUrl?: string;
            ClickHouseUrl?: string;
          }[];
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Launch a new cat-validate instance */
    post: {
      parameters: {
        body: {
          body?: {
            /** @description Name of the cat-validate instance */
            name: string;
            Keys: string;
            Issuer?: string;
            RedisUrl?: string;
            ClickHouseUrl?: string;
          };
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the cat-validate instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            Keys: string;
            Issuer?: string;
            RedisUrl?: string;
            ClickHouseUrl?: string;
          };
        };
        /** Default Response */
        403: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        409: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/cat-validateinstance/{id}': {
    /** Obtain status and resource URLs for an cat-validate instance */
    get: {
      parameters: {
        path: {
          /** Name of the cat-validate instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the cat-validate instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            Keys: string;
            Issuer?: string;
            RedisUrl?: string;
            ClickHouseUrl?: string;
          };
        };
        /** Default Response */
        404: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Stop and remove an cat-validate instance */
    delete: {
      parameters: {
        path: {
          /** Name of the cat-validate instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        204: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/health/{id}': {
    /** Return status of cat-validate instance */
    get: {
      parameters: {
        path: {
          /** Name of the cat-validate instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @enum {string} */
            status: 'starting' | 'running' | 'stopped' | 'failed' | 'unknown';
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/logs/{id}': {
    /** Return the latest logs from the cat-validate instance */
    get: {
      parameters: {
        query: {
          timestamps?: boolean;
          sinceSeconds?: number;
        };
        path: {
          /** Name of the cat-validate instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/ports/{id}': {
    /** Return the exposed extra ports for cat-validate instance */
    get: {
      parameters: {
        path: {
          /** Name of the cat-validate instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            externalIp: string;
            externalPort: number;
            internalPort: number;
          }[];
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
}

export interface definitions {}

export interface operations {}

export interface external {}

export type EyevinnCatValidate =
  paths['/cat-validateinstance/{id}']['get']['responses']['200']['schema'];

export type EyevinnCatValidateConfig =
  paths['/cat-validateinstance']['post']['parameters']['body']['body'];
import {
  Context,
  createInstance,
  waitForInstanceReady,
  removeInstance,
  getInstance
} from '@osaas/client-core';
/**
 * @namespace eyevinn-cat-validate
 * @description Enhance your security with Common Access Token Validator, the ultimate validation service for CTA-5007 tokens. Seamlessly integrate with Redis and ClickHouse for efficient token management. Secure your apps today!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */

/**
 * @typedef {Object} EyevinnCatValidateConfig
 * @property {string} name - Name of cat-validate
 * @property {string} Keys - Keys
 * @property {string} [Issuer] - Issuer
 * @property {string} [RedisUrl] - RedisUrl
 * @property {string} [ClickHouseUrl] - ClickHouseUrl

 * 
 */

/**
 * @typedef {Object} EyevinnCatValidate
 * @property {string} name - Name of the Common Access Token Validator instance
 * @property {string} url - URL of the Common Access Token Validator instance
 *
 */

/**
 * Create a new Common Access Token Validator instance
 *
 * @memberOf eyevinn-cat-validate
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnCatValidateConfig} body - Service instance configuration
 * @returns {EyevinnCatValidate} - Service instance
 * @example
 * import { Context } from '@osaas/client-core';
 * import { createEyevinnCatValidateInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const body: EyevinnCatValidateConfig = { name: 'myinstance', ... };
 * const instance = await createEyevinnCatValidateInstance(ctx, body);
 * console.log(instance.url);
 */
export async function createEyevinnCatValidateInstance(
  ctx: Context,
  body: EyevinnCatValidateConfig
): Promise<EyevinnCatValidate> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'eyevinn-cat-validate'
  );
  const instance = await createInstance(
    ctx,
    'eyevinn-cat-validate',
    serviceAccessToken,
    body
  );
  await waitForInstanceReady('eyevinn-cat-validate', instance.name, ctx);
  return instance;
}

/**
 * Remove a Common Access Token Validator instance
 *
 * @memberOf eyevinn-cat-validate
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the validator to be removed
 */
export async function removeEyevinnCatValidateInstance(
  ctx: Context,
  name: string
): Promise<void> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'eyevinn-cat-validate'
  );
  await removeInstance(ctx, 'eyevinn-cat-validate', name, serviceAccessToken);
}

/**
 * Get a Common Access Token Validator instance
 *
 * @memberOf eyevinn-cat-validate
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the validator to be retrieved
 * @returns {EyevinnCatValidate} - Service instance
 * @example
 * import { Context } from '@osaas/client-core';
 * import { getEyevinnCatValidateInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await getEyevinnCatValidateInstance(ctx, 'myinstance');
 * console.log(instance.url);
 */
export async function getEyevinnCatValidateInstance(
  ctx: Context,
  name: string
): Promise<EyevinnCatValidate> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'eyevinn-cat-validate'
  );
  return await getInstance(
    ctx,
    'eyevinn-cat-validate',
    name,
    serviceAccessToken
  );
}
