/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    /** Health check endpoint */
    get: {
      parameters: {
        query: {
          verbose?: boolean;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: Partial<string> &
            Partial<{
              status: string;
              versions: {
                '@osaas/orchestrator': string;
              };
              environment: string;
              _links: {
                self: {
                  href: string;
                };
                api: {
                  href: string;
                };
              };
            }>;
        };
        /** Default Response */
        500: {
          schema: {
            status: string;
            reason: string;
          };
        };
      };
    };
  };
  '/playout-uiinstance': {
    /** List all running playout-ui instances */
    get: {
      responses: {
        /** Default Response */
        200: {
          schema: ({
            /** @description Name of the playout-ui instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            DbUrl: string;
            Database?: string;
            Username: string;
            Password: string;
            CorsOrigins?: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          })[];
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Launch a new playout-ui instance */
    post: {
      parameters: {
        body: {
          body?: {
            /** @description Name of the playout-ui instance */
            name: string;
            DbUrl: string;
            Database?: string;
            Username: string;
            Password: string;
            CorsOrigins?: string;
          };
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the playout-ui instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            DbUrl: string;
            Database?: string;
            Username: string;
            Password: string;
            CorsOrigins?: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          };
        };
        /** Default Response */
        403: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        409: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/restart/{id}': {
    /** Restart playout-ui */
    post: {
      parameters: {
        path: {
          /** Name of the playout-ui instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        204: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/playout-uiinstance/{id}': {
    /** Obtain status and resource URLs for an playout-ui instance */
    get: {
      parameters: {
        path: {
          /** Name of the playout-ui instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the playout-ui instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            DbUrl: string;
            Database?: string;
            Username: string;
            Password: string;
            CorsOrigins?: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          };
        };
        /** Default Response */
        404: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Stop and remove an playout-ui instance */
    delete: {
      parameters: {
        path: {
          /** Name of the playout-ui instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        204: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Patch playout-ui instance with new parameters and restart */
    patch: {
      parameters: {
        body: {
          body?: {
            /** @description Name of the playout-ui instance */
            name?: string;
            DbUrl?: string;
            Database?: string;
            Username?: string;
            Password?: string;
            CorsOrigins?: string;
          };
        };
        path: {
          /** Name of the playout-ui instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the playout-ui instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            DbUrl: string;
            Database?: string;
            Username: string;
            Password: string;
            CorsOrigins?: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          };
        };
        /** Default Response */
        400: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        404: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/health/{id}': {
    /** Return status of playout-ui instance */
    get: {
      parameters: {
        path: {
          /** Name of the playout-ui instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @enum {string} */
            status: 'starting' | 'running' | 'stopped' | 'failed' | 'unknown';
            images?: string[];
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/logs/{id}': {
    /** Return the latest logs from the playout-ui instance */
    get: {
      parameters: {
        query: {
          timestamps?: boolean;
          sinceSeconds?: number;
        };
        path: {
          /** Name of the playout-ui instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/ports/{id}': {
    /** Return the exposed extra ports for playout-ui instance */
    get: {
      parameters: {
        path: {
          /** Name of the playout-ui instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            externalIp: string;
            externalPort: number;
            internalPort: number;
          }[];
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
}

export interface definitions {}

export interface operations {}

export interface external {}

export type BirmePlayoutUi =
  paths['/playout-uiinstance/{id}']['get']['responses']['200']['schema'];

export type BirmePlayoutUiConfig =
  paths['/playout-uiinstance']['post']['parameters']['body']['body'];
import {
  Context,
  createInstance,
  waitForInstanceReady,
  removeInstance,
  getInstance
} from '@osaas/client-core';
/**
 * @namespace birme-playout-ui
 * @description Elevate your media scheduling with Playout UI! Seamlessly manage playlists with live time display, real-time progress tracking, and backend flexibility. Effortlessly organize, edit, and control playback. Ideal for dynamic environments!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */

/**
 * @typedef {Object} BirmePlayoutUiConfig
 * @property {string} name - Name of playout-ui
 * @property {string} DbUrl - DbUrl
 * @property {string} [Database] - Database
 * @property {string} Username - Username
 * @property {string} Password - Password
 * @property {string} [CorsOrigins] - CorsOrigins

 * 
 */

/**
 * @typedef {Object} BirmePlayoutUi
 * @property {string} name - Name of the Playout UI instance
 * @property {string} url - URL of the Playout UI instance
 *
 */

/**
 * Create a new Playout UI instance
 *
 * @memberOf birme-playout-ui
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {BirmePlayoutUiConfig} body - Service instance configuration
 * @returns {BirmePlayoutUi} - Service instance
 * @example
 * import { Context } from '@osaas/client-core';
 * import { createBirmePlayoutUiInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const body: BirmePlayoutUiConfig = { name: 'myinstance', ... };
 * const instance = await createBirmePlayoutUiInstance(ctx, body);
 * console.log(instance.url);
 */
export async function createBirmePlayoutUiInstance(
  ctx: Context,
  body: BirmePlayoutUiConfig
): Promise<BirmePlayoutUi> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'birme-playout-ui'
  );
  const instance = await createInstance(
    ctx,
    'birme-playout-ui',
    serviceAccessToken,
    body
  );
  await waitForInstanceReady('birme-playout-ui', instance.name, ctx);
  return instance;
}

/**
 * Remove a Playout UI instance
 *
 * @memberOf birme-playout-ui
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the playout-ui to be removed
 */
export async function removeBirmePlayoutUiInstance(
  ctx: Context,
  name: string
): Promise<void> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'birme-playout-ui'
  );
  await removeInstance(ctx, 'birme-playout-ui', name, serviceAccessToken);
}

/**
 * Get a Playout UI instance
 *
 * @memberOf birme-playout-ui
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the playout-ui to be retrieved
 * @returns {BirmePlayoutUi} - Service instance
 * @example
 * import { Context } from '@osaas/client-core';
 * import { getBirmePlayoutUiInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await getBirmePlayoutUiInstance(ctx, 'myinstance');
 * console.log(instance.url);
 */
export async function getBirmePlayoutUiInstance(
  ctx: Context,
  name: string
): Promise<BirmePlayoutUi> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'birme-playout-ui'
  );
  return await getInstance(ctx, 'birme-playout-ui', name, serviceAccessToken);
}
