/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    /** Say hello */
    get: {
      responses: {
        /** The magical words! */
        200: {
          schema: string;
        };
      };
    };
  };
  '/picoshareinstance': {
    /** List all running picoshare instances */
    get: {
      responses: {
        /** Default Response */
        200: {
          schema: ({
            /** @description Name of the picoshare instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            SharedSecret: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          })[];
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Launch a new picoshare instance */
    post: {
      parameters: {
        body: {
          body?: {
            /** @description Name of the picoshare instance */
            name: string;
            SharedSecret: string;
          };
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the picoshare instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            SharedSecret: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          };
        };
        /** Default Response */
        403: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        409: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/restart/{id}': {
    /** Restart picoshare */
    post: {
      parameters: {
        path: {
          /** Name of the picoshare instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        204: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/picoshareinstance/{id}': {
    /** Obtain status and resource URLs for an picoshare instance */
    get: {
      parameters: {
        path: {
          /** Name of the picoshare instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the picoshare instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            SharedSecret: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          };
        };
        /** Default Response */
        404: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Stop and remove an picoshare instance */
    delete: {
      parameters: {
        path: {
          /** Name of the picoshare instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        204: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Patch picoshare instance with new parameters and restart */
    patch: {
      parameters: {
        body: {
          body?: {
            /** @description Name of the picoshare instance */
            name?: string;
            SharedSecret?: string;
          };
        };
        path: {
          /** Name of the picoshare instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the picoshare instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            SharedSecret: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          };
        };
        /** Default Response */
        404: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/health/{id}': {
    /** Return status of picoshare instance */
    get: {
      parameters: {
        path: {
          /** Name of the picoshare instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @enum {string} */
            status: 'starting' | 'running' | 'stopped' | 'failed' | 'unknown';
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/logs/{id}': {
    /** Return the latest logs from the picoshare instance */
    get: {
      parameters: {
        query: {
          timestamps?: boolean;
          sinceSeconds?: number;
        };
        path: {
          /** Name of the picoshare instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/ports/{id}': {
    /** Return the exposed extra ports for picoshare instance */
    get: {
      parameters: {
        path: {
          /** Name of the picoshare instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            externalIp: string;
            externalPort: number;
            internalPort: number;
          }[];
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
}

export interface definitions {}

export interface operations {}

export interface external {}

export type MtlynchPicoshare =
  paths['/picoshareinstance/{id}']['get']['responses']['200']['schema'];

export type MtlynchPicoshareConfig =
  paths['/picoshareinstance']['post']['parameters']['body']['body'];
import {
  Context,
  createInstance,
  waitForInstanceReady,
  removeInstance,
  getInstance
} from '@osaas/client-core';
/**
 * @namespace mtlynch-picoshare
 * @description Simplify file sharing with PicoShare! Instantly create direct download links without ads, file restrictions, or resizing hassles. Share any file, any size, effortlessly and securely. Try PicoShare today!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-PicoShare.html|Online docs} for further information
 */

/**
 * @typedef {Object} MtlynchPicoshareConfig
 * @property {string} name - Name of picoshare
 * @property {string} SharedSecret - SharedSecret

 * 
 */

/**
 * @typedef {Object} MtlynchPicoshare
 * @property {string} name - Name of the PicoShare instance
 * @property {string} url - URL of the PicoShare instance
 *
 */

/**
 * Create a new PicoShare instance
 *
 * @memberOf mtlynch-picoshare
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {MtlynchPicoshareConfig} body - Service instance configuration
 * @returns {MtlynchPicoshare} - Service instance
 * @example
 * import { Context } from '@osaas/client-core';
 * import { createMtlynchPicoshareInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const body: MtlynchPicoshareConfig = { name: 'myinstance', ... };
 * const instance = await createMtlynchPicoshareInstance(ctx, body);
 * console.log(instance.url);
 */
export async function createMtlynchPicoshareInstance(
  ctx: Context,
  body: MtlynchPicoshareConfig
): Promise<MtlynchPicoshare> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'mtlynch-picoshare'
  );
  const instance = await createInstance(
    ctx,
    'mtlynch-picoshare',
    serviceAccessToken,
    body
  );
  await waitForInstanceReady('mtlynch-picoshare', instance.name, ctx);
  return instance;
}

/**
 * Remove a PicoShare instance
 *
 * @memberOf mtlynch-picoshare
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the picoshare to be removed
 */
export async function removeMtlynchPicoshareInstance(
  ctx: Context,
  name: string
): Promise<void> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'mtlynch-picoshare'
  );
  await removeInstance(ctx, 'mtlynch-picoshare', name, serviceAccessToken);
}

/**
 * Get a PicoShare instance
 *
 * @memberOf mtlynch-picoshare
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the picoshare to be retrieved
 * @returns {MtlynchPicoshare} - Service instance
 * @example
 * import { Context } from '@osaas/client-core';
 * import { getMtlynchPicoshareInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await getMtlynchPicoshareInstance(ctx, 'myinstance');
 * console.log(instance.url);
 */
export async function getMtlynchPicoshareInstance(
  ctx: Context,
  name: string
): Promise<MtlynchPicoshare> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'mtlynch-picoshare'
  );
  return await getInstance(ctx, 'mtlynch-picoshare', name, serviceAccessToken);
}
