/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    /** Say hello */
    get: {
      responses: {
        /** The magical words! */
        200: {
          schema: string;
        };
      };
    };
  };
  '/formbricksinstance': {
    /** List all running formbricks instances */
    get: {
      responses: {
        /** Default Response */
        200: {
          schema: ({
            /** @description Name of the formbricks instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            DatabaseUrl: string;
            AwsAccessKeyId?: string;
            AwsSecretAccessKey?: string;
            AwsRegion?: string;
            S3BucketName?: string;
            S3EndpointUrl?: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          })[];
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Launch a new formbricks instance */
    post: {
      parameters: {
        body: {
          body?: {
            /** @description Name of the formbricks instance */
            name: string;
            DatabaseUrl: string;
            AwsAccessKeyId?: string;
            AwsSecretAccessKey?: string;
            AwsRegion?: string;
            S3BucketName?: string;
            S3EndpointUrl?: string;
          };
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the formbricks instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            DatabaseUrl: string;
            AwsAccessKeyId?: string;
            AwsSecretAccessKey?: string;
            AwsRegion?: string;
            S3BucketName?: string;
            S3EndpointUrl?: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          };
        };
        /** Default Response */
        403: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        409: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/restart/{id}': {
    /** Restart formbricks */
    post: {
      parameters: {
        path: {
          /** Name of the formbricks instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        204: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/formbricksinstance/{id}': {
    /** Obtain status and resource URLs for an formbricks instance */
    get: {
      parameters: {
        path: {
          /** Name of the formbricks instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the formbricks instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            DatabaseUrl: string;
            AwsAccessKeyId?: string;
            AwsSecretAccessKey?: string;
            AwsRegion?: string;
            S3BucketName?: string;
            S3EndpointUrl?: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          };
        };
        /** Default Response */
        404: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Stop and remove an formbricks instance */
    delete: {
      parameters: {
        path: {
          /** Name of the formbricks instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        204: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Patch formbricks instance with new parameters and restart */
    patch: {
      parameters: {
        body: {
          body?: {
            /** @description Name of the formbricks instance */
            name?: string;
            DatabaseUrl?: string;
            AwsAccessKeyId?: string;
            AwsSecretAccessKey?: string;
            AwsRegion?: string;
            S3BucketName?: string;
            S3EndpointUrl?: string;
          };
        };
        path: {
          /** Name of the formbricks instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the formbricks instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            DatabaseUrl: string;
            AwsAccessKeyId?: string;
            AwsSecretAccessKey?: string;
            AwsRegion?: string;
            S3BucketName?: string;
            S3EndpointUrl?: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          };
        };
        /** Default Response */
        404: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/health/{id}': {
    /** Return status of formbricks instance */
    get: {
      parameters: {
        path: {
          /** Name of the formbricks instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @enum {string} */
            status: 'starting' | 'running' | 'stopped' | 'failed' | 'unknown';
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/logs/{id}': {
    /** Return the latest logs from the formbricks instance */
    get: {
      parameters: {
        query: {
          timestamps?: boolean;
          sinceSeconds?: number;
        };
        path: {
          /** Name of the formbricks instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/ports/{id}': {
    /** Return the exposed extra ports for formbricks instance */
    get: {
      parameters: {
        path: {
          /** Name of the formbricks instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            externalIp: string;
            externalPort: number;
            internalPort: number;
          }[];
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
}

export interface definitions {}

export interface operations {}

export interface external {}

export type FormbricksFormbricks =
  paths['/formbricksinstance/{id}']['get']['responses']['200']['schema'];

export type FormbricksFormbricksConfig =
  paths['/formbricksinstance']['post']['parameters']['body']['body'];
import {
  Context,
  createInstance,
  waitForInstanceReady,
  removeInstance,
  getInstance
} from '@osaas/client-core';
/**
 * @namespace formbricks-formbricks
 * @description Revolutionize user engagement with Formbricks, the open-source Qualtrics alternative! Create conversion-optimized, privacy-first surveys effortlessly. Empower your team with transformational insights today!
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-Formbricks.html|Online docs} for further information
 */

/**
 * @typedef {Object} FormbricksFormbricksConfig
 * @property {string} name - Name of formbricks
 * @property {string} DatabaseUrl - DatabaseUrl
 * @property {string} [AwsAccessKeyId] - AwsAccessKeyId
 * @property {string} [AwsSecretAccessKey] - AwsSecretAccessKey
 * @property {string} [AwsRegion] - AwsRegion
 * @property {string} [S3BucketName] - S3BucketName
 * @property {string} [S3EndpointUrl] - S3EndpointUrl

 * 
 */

/**
 * @typedef {Object} FormbricksFormbricks
 * @property {string} name - Name of the Formbricks instance
 * @property {string} url - URL of the Formbricks instance
 *
 */

/**
 * Create a new Formbricks instance
 *
 * @memberOf formbricks-formbricks
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {FormbricksFormbricksConfig} body - Service instance configuration
 * @returns {FormbricksFormbricks} - Service instance
 * @example
 * import { Context } from '@osaas/client-core';
 * import { createFormbricksFormbricksInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const body: FormbricksFormbricksConfig = { name: 'myinstance', ... };
 * const instance = await createFormbricksFormbricksInstance(ctx, body);
 * console.log(instance.url);
 */
export async function createFormbricksFormbricksInstance(
  ctx: Context,
  body: FormbricksFormbricksConfig
): Promise<FormbricksFormbricks> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'formbricks-formbricks'
  );
  const instance = await createInstance(
    ctx,
    'formbricks-formbricks',
    serviceAccessToken,
    body
  );
  await waitForInstanceReady('formbricks-formbricks', instance.name, ctx);
  return instance;
}

/**
 * Remove a Formbricks instance
 *
 * @memberOf formbricks-formbricks
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the formbricks to be removed
 */
export async function removeFormbricksFormbricksInstance(
  ctx: Context,
  name: string
): Promise<void> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'formbricks-formbricks'
  );
  await removeInstance(ctx, 'formbricks-formbricks', name, serviceAccessToken);
}

/**
 * Get a Formbricks instance
 *
 * @memberOf formbricks-formbricks
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the formbricks to be retrieved
 * @returns {FormbricksFormbricks} - Service instance
 * @example
 * import { Context } from '@osaas/client-core';
 * import { getFormbricksFormbricksInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await getFormbricksFormbricksInstance(ctx, 'myinstance');
 * console.log(instance.url);
 */
export async function getFormbricksFormbricksInstance(
  ctx: Context,
  name: string
): Promise<FormbricksFormbricks> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'formbricks-formbricks'
  );
  return await getInstance(
    ctx,
    'formbricks-formbricks',
    name,
    serviceAccessToken
  );
}
