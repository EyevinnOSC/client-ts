/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    /** Health check endpoint */
    get: {
      parameters: {
        query: {
          verbose?: boolean;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: Partial<string> &
            Partial<{
              status: string;
              versions: {
                '@osaas/orchestrator': string;
              };
              environment: string;
              _links: {
                self: {
                  href: string;
                };
                api: {
                  href: string;
                };
              };
            }>;
        };
        /** Default Response */
        500: {
          schema: {
            status: string;
            reason: string;
          };
        };
      };
    };
  };
  '/ad-normalizerinstance': {
    /** List all running ad-normalizer instances */
    get: {
      responses: {
        /** Default Response */
        200: {
          schema: ({
            /** @description Name of the ad-normalizer instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            EncoreUrl: string;
            RedisUrl?: string;
            AdServerUrl: string;
            OutputBucketUrl: string;
            KeyRegex?: string;
            KeyField?: string;
            EncoreProfile?: string;
            AssetServerUrl?: string;
            JitPackaging?: boolean;
            PackagingQueueName?: string;
            OscAccessToken?: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          })[];
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Launch a new ad-normalizer instance */
    post: {
      parameters: {
        body: {
          body?: {
            /** @description Name of the ad-normalizer instance */
            name: string;
            EncoreUrl: string;
            RedisUrl?: string;
            AdServerUrl: string;
            OutputBucketUrl: string;
            KeyRegex?: string;
            KeyField?: string;
            EncoreProfile?: string;
            AssetServerUrl?: string;
            JitPackaging?: boolean;
            PackagingQueueName?: string;
            OscAccessToken?: string;
          };
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the ad-normalizer instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            EncoreUrl: string;
            RedisUrl?: string;
            AdServerUrl: string;
            OutputBucketUrl: string;
            KeyRegex?: string;
            KeyField?: string;
            EncoreProfile?: string;
            AssetServerUrl?: string;
            JitPackaging?: boolean;
            PackagingQueueName?: string;
            OscAccessToken?: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          };
        };
        /** Default Response */
        403: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        409: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/restart/{id}': {
    /** Restart ad-normalizer */
    post: {
      parameters: {
        path: {
          /** Name of the ad-normalizer instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        204: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/ad-normalizerinstance/{id}': {
    /** Obtain status and resource URLs for an ad-normalizer instance */
    get: {
      parameters: {
        path: {
          /** Name of the ad-normalizer instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the ad-normalizer instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            EncoreUrl: string;
            RedisUrl?: string;
            AdServerUrl: string;
            OutputBucketUrl: string;
            KeyRegex?: string;
            KeyField?: string;
            EncoreProfile?: string;
            AssetServerUrl?: string;
            JitPackaging?: boolean;
            PackagingQueueName?: string;
            OscAccessToken?: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          };
        };
        /** Default Response */
        404: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Stop and remove an ad-normalizer instance */
    delete: {
      parameters: {
        path: {
          /** Name of the ad-normalizer instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        204: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Patch ad-normalizer instance with new parameters and restart */
    patch: {
      parameters: {
        body: {
          body?: {
            /** @description Name of the ad-normalizer instance */
            name?: string;
            EncoreUrl?: string;
            RedisUrl?: string;
            AdServerUrl?: string;
            OutputBucketUrl?: string;
            KeyRegex?: string;
            KeyField?: string;
            EncoreProfile?: string;
            AssetServerUrl?: string;
            JitPackaging?: boolean;
            PackagingQueueName?: string;
            OscAccessToken?: string;
          };
        };
        path: {
          /** Name of the ad-normalizer instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the ad-normalizer instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            EncoreUrl: string;
            RedisUrl?: string;
            AdServerUrl: string;
            OutputBucketUrl: string;
            KeyRegex?: string;
            KeyField?: string;
            EncoreProfile?: string;
            AssetServerUrl?: string;
            JitPackaging?: boolean;
            PackagingQueueName?: string;
            OscAccessToken?: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          };
        };
        /** Default Response */
        400: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        404: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/health/{id}': {
    /** Return status of ad-normalizer instance */
    get: {
      parameters: {
        path: {
          /** Name of the ad-normalizer instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @enum {string} */
            status: 'starting' | 'running' | 'stopped' | 'failed' | 'unknown';
            images?: string[];
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/logs/{id}': {
    /** Return the latest logs from the ad-normalizer instance */
    get: {
      parameters: {
        query: {
          timestamps?: boolean;
          sinceSeconds?: number;
        };
        path: {
          /** Name of the ad-normalizer instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/ports/{id}': {
    /** Return the exposed extra ports for ad-normalizer instance */
    get: {
      parameters: {
        path: {
          /** Name of the ad-normalizer instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            externalIp: string;
            externalPort: number;
            internalPort: number;
          }[];
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
}

export interface definitions {}

export interface operations {}

export interface external {}

export type EyevinnAdNormalizer =
  paths['/ad-normalizerinstance/{id}']['get']['responses']['200']['schema'];

export type EyevinnAdNormalizerConfig =
  paths['/ad-normalizerinstance']['post']['parameters']['body']['body'];
import {
  Context,
  createInstance,
  waitForInstanceReady,
  removeInstance,
  getInstance
} from '@osaas/client-core';
/**
 * @namespace eyevinn-ad-normalizer
 * @description Optimize your ad delivery with Ad Normalizer! Seamlessly transcode and package VAST creatives for your ad server using a Redis-backed workflow. Ensure efficient media processing and reliable ad streaming.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 * @see {@link https://docs.osaas.io/osaas.wiki/Service:-Ad-Normalizer.html|Online docs} for further information
 */

/**
 * @typedef {Object} EyevinnAdNormalizerConfig
 * @property {string} name - Name of ad-normalizer
 * @property {string} EncoreUrl - URL of the related encore instance
 * @property {string} [RedisUrl] - The url to the redis/valkey instance used. Should use the redis protocol and ideally include port
 * @property {string} AdServerUrl - The url to the ad server endpoint. For the test ad server the path should be /api/v1/ads
 * @property {string} OutputBucketUrl - The url to the output folder for the packaged assets
 * @property {string} [KeyRegex] - Defaults to [^a-zA-Z0-9] if not set
 * @property {string} [KeyField] - Which field that the normalizer should use as key in valkey/redis. Optional, defaults to universalAdId if not set
 * @property {string} [EncoreProfile] - Optional, defaults to "program" if not set
 * @property {string} [AssetServerUrl] - Optional, http version of OUTPUT_BUCKET_URL is used if not set
 * @property {boolean} [JitPackaging] - Signals wether packaging of ads is done JIT or if completed jobs should be put on the packaging queue. optional, defaults to false if not provided
 * @property {string} [PackagingQueueName] - Name of the redis queue used for packaging jobs. Optional, defaults to "package" if not provided
 * @property {string} [OscAccessToken] - OscAccessToken

 * 
 */

/**
 * @typedef {Object} EyevinnAdNormalizer
 * @property {string} name - Name of the Ad Normalizer instance
 * @property {string} url - URL of the Ad Normalizer instance
 *
 */

/**
 * Create a new Ad Normalizer instance
 *
 * @memberOf eyevinn-ad-normalizer
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnAdNormalizerConfig} body - Service instance configuration
 * @returns {EyevinnAdNormalizer} - Service instance
 * @example
 * import { Context } from '@osaas/client-core';
 * import { createEyevinnAdNormalizerInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const body: EyevinnAdNormalizerConfig = { name: 'myinstance', ... };
 * const instance = await createEyevinnAdNormalizerInstance(ctx, body);
 * console.log(instance.url);
 */
export async function createEyevinnAdNormalizerInstance(
  ctx: Context,
  body: EyevinnAdNormalizerConfig
): Promise<EyevinnAdNormalizer> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'eyevinn-ad-normalizer'
  );
  const instance = await createInstance(
    ctx,
    'eyevinn-ad-normalizer',
    serviceAccessToken,
    body
  );
  await waitForInstanceReady('eyevinn-ad-normalizer', instance.name, ctx);
  return instance;
}

/**
 * Remove a Ad Normalizer instance
 *
 * @memberOf eyevinn-ad-normalizer
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the normalizer to be removed
 */
export async function removeEyevinnAdNormalizerInstance(
  ctx: Context,
  name: string
): Promise<void> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'eyevinn-ad-normalizer'
  );
  await removeInstance(ctx, 'eyevinn-ad-normalizer', name, serviceAccessToken);
}

/**
 * Get a Ad Normalizer instance
 *
 * @memberOf eyevinn-ad-normalizer
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the normalizer to be retrieved
 * @returns {EyevinnAdNormalizer} - Service instance
 * @example
 * import { Context } from '@osaas/client-core';
 * import { getEyevinnAdNormalizerInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await getEyevinnAdNormalizerInstance(ctx, 'myinstance');
 * console.log(instance.url);
 */
export async function getEyevinnAdNormalizerInstance(
  ctx: Context,
  name: string
): Promise<EyevinnAdNormalizer> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'eyevinn-ad-normalizer'
  );
  return await getInstance(
    ctx,
    'eyevinn-ad-normalizer',
    name,
    serviceAccessToken
  );
}
