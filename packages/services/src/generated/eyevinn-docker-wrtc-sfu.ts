/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    /** Health check endpoint */
    get: {
      parameters: {
        query: {
          verbose?: boolean;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: Partial<string> &
            Partial<{
              status: string;
              versions: {
                '@osaas/orchestrator': string;
              };
              environment: string;
              _links: {
                self: {
                  href: string;
                };
                api: {
                  href: string;
                };
              };
            }>;
        };
        /** Default Response */
        500: {
          schema: {
            status: string;
            reason: string;
          };
        };
      };
    };
  };
  '/docker-wrtc-sfuinstance': {
    /** List all running docker-wrtc-sfu instances */
    get: {
      responses: {
        /** Default Response */
        200: {
          schema: ({
            /** @description Name of the docker-wrtc-sfu instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            ApiKey?: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          })[];
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Launch a new docker-wrtc-sfu instance */
    post: {
      parameters: {
        body: {
          body?: {
            /** @description Name of the docker-wrtc-sfu instance */
            name: string;
            ApiKey?: string;
          };
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the docker-wrtc-sfu instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            ApiKey?: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          };
        };
        /** Default Response */
        403: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        409: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/restart/{id}': {
    /** Restart docker-wrtc-sfu */
    post: {
      parameters: {
        path: {
          /** Name of the docker-wrtc-sfu instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        204: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/docker-wrtc-sfuinstance/{id}': {
    /** Obtain status and resource URLs for an docker-wrtc-sfu instance */
    get: {
      parameters: {
        path: {
          /** Name of the docker-wrtc-sfu instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the docker-wrtc-sfu instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            ApiKey?: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          };
        };
        /** Default Response */
        404: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Stop and remove an docker-wrtc-sfu instance */
    delete: {
      parameters: {
        path: {
          /** Name of the docker-wrtc-sfu instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        204: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
    /** Patch docker-wrtc-sfu instance with new parameters and restart */
    patch: {
      parameters: {
        body: {
          body?: {
            /** @description Name of the docker-wrtc-sfu instance */
            name?: string;
            ApiKey?: string;
          };
        };
        path: {
          /** Name of the docker-wrtc-sfu instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @description Name of the docker-wrtc-sfu instance */
            name: string;
            /** @description URL to instance API */
            url: string;
            resources: {
              license: {
                /** @description URL to license information */
                url: string;
              };
              apiDocs?: {
                /** @description URL to instance API documentation */
                url: string;
              };
              app?: {
                /** @description URL to instance application (GUI) */
                url: string;
              };
            };
            ApiKey?: string;
          } & {
            _links: {
              self: {
                /** @description Instance resource */
                href: string;
              };
              logs?: {
                /** @description Get logs for this instance */
                href: string;
              };
              health?: {
                /** @description Get health status for this instance */
                href: string;
              };
              ports?: {
                /** @description Get exposed ports for this instance */
                href: string;
              };
              restart?: {
                /** @description Restart this instance */
                href: string;
              };
              update?: {
                /** @description Update this instance */
                href: string;
              };
            };
          };
        };
        /** Default Response */
        404: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/health/{id}': {
    /** Return status of docker-wrtc-sfu instance */
    get: {
      parameters: {
        path: {
          /** Name of the docker-wrtc-sfu instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            /** @enum {string} */
            status: 'starting' | 'running' | 'stopped' | 'failed' | 'unknown';
            images?: string[];
          };
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/logs/{id}': {
    /** Return the latest logs from the docker-wrtc-sfu instance */
    get: {
      parameters: {
        query: {
          timestamps?: boolean;
          sinceSeconds?: number;
        };
        path: {
          /** Name of the docker-wrtc-sfu instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: string;
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
  '/ports/{id}': {
    /** Return the exposed extra ports for docker-wrtc-sfu instance */
    get: {
      parameters: {
        path: {
          /** Name of the docker-wrtc-sfu instance */
          id: string;
        };
      };
      responses: {
        /** Default Response */
        200: {
          schema: {
            externalIp: string;
            externalPort: number;
            internalPort: number;
          }[];
        };
        /** Default Response */
        500: {
          schema: {
            /** @description Reason why something failed */
            reason: string;
          };
        };
      };
    };
  };
}

export interface definitions {}

export interface operations {}

export interface external {}

export type EyevinnDockerWrtcSfu =
  paths['/docker-wrtc-sfuinstance/{id}']['get']['responses']['200']['schema'];

export type EyevinnDockerWrtcSfuConfig =
  paths['/docker-wrtc-sfuinstance']['post']['parameters']['body']['body'];
import {
  Context,
  createInstance,
  waitForInstanceReady,
  removeInstance,
  getInstance
} from '@osaas/client-core';
/**
 * @namespace eyevinn-docker-wrtc-sfu
 * @description Elevate your broadcast streaming with docker-wrtc-sfu: a seamless SFU solution, harnessing Symphony Media Bridge in a Docker container. Achieve unparalleled WebRTC performance and flexibility effortlessly.
 * @author Eyevinn Technology AB <osc@eyevinn.se>
 * @copyright 2025 Eyevinn Technology AB
 *
 */

/**
 * @typedef {Object} EyevinnDockerWrtcSfuConfig
 * @property {string} name - Name of docker-wrtc-sfu
 * @property {string} [ApiKey] - ApiKey

 * 
 */

/**
 * @typedef {Object} EyevinnDockerWrtcSfu
 * @property {string} name - Name of the Symphony Media Bridge instance
 * @property {string} url - URL of the Symphony Media Bridge instance
 *
 */

/**
 * Create a new Symphony Media Bridge instance
 *
 * @memberOf eyevinn-docker-wrtc-sfu
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {EyevinnDockerWrtcSfuConfig} body - Service instance configuration
 * @returns {EyevinnDockerWrtcSfu} - Service instance
 * @example
 * import { Context } from '@osaas/client-core';
 * import { createEyevinnDockerWrtcSfuInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const body: EyevinnDockerWrtcSfuConfig = { name: 'myinstance', ... };
 * const instance = await createEyevinnDockerWrtcSfuInstance(ctx, body);
 * console.log(instance.url);
 */
export async function createEyevinnDockerWrtcSfuInstance(
  ctx: Context,
  body: EyevinnDockerWrtcSfuConfig
): Promise<EyevinnDockerWrtcSfu> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'eyevinn-docker-wrtc-sfu'
  );
  const instance = await createInstance(
    ctx,
    'eyevinn-docker-wrtc-sfu',
    serviceAccessToken,
    body
  );
  await waitForInstanceReady('eyevinn-docker-wrtc-sfu', instance.name, ctx);
  return instance;
}

/**
 * Remove a Symphony Media Bridge instance
 *
 * @memberOf eyevinn-docker-wrtc-sfu
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the sfu to be removed
 */
export async function removeEyevinnDockerWrtcSfuInstance(
  ctx: Context,
  name: string
): Promise<void> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'eyevinn-docker-wrtc-sfu'
  );
  await removeInstance(
    ctx,
    'eyevinn-docker-wrtc-sfu',
    name,
    serviceAccessToken
  );
}

/**
 * Get a Symphony Media Bridge instance
 *
 * @memberOf eyevinn-docker-wrtc-sfu
 * @async
 * @param {Context} context - Open Source Cloud configuration context
 * @param {string} name - Name of the sfu to be retrieved
 * @returns {EyevinnDockerWrtcSfu} - Service instance
 * @example
 * import { Context } from '@osaas/client-core';
 * import { getEyevinnDockerWrtcSfuInstance } from '@osaas/client-services';
 *
 * const ctx = new Context();
 * const instance = await getEyevinnDockerWrtcSfuInstance(ctx, 'myinstance');
 * console.log(instance.url);
 */
export async function getEyevinnDockerWrtcSfuInstance(
  ctx: Context,
  name: string
): Promise<EyevinnDockerWrtcSfu> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    'eyevinn-docker-wrtc-sfu'
  );
  return await getInstance(
    ctx,
    'eyevinn-docker-wrtc-sfu',
    name,
    serviceAccessToken
  );
}
